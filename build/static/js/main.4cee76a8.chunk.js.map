{"version":3,"sources":["Components/paginator/Pagination.module.css","Components/Api/api.ts","Components/Redux/table-reducer.ts","Components/Header/Header.tsx","Components/paginator/Pagination.tsx","Components/Table/additionalInfo/AdditionalInfo.tsx","Components/Table/ModalWindows/ModalNewContact.tsx","Components/Table/TableSmallListOfContacts.tsx","Components/Table/TableBigListOfContacts.tsx","Components/Table/TableContainer.tsx","App.tsx","reportWebVitals.js","Components/Redux/Store.ts","index.tsx","Components/Header/Header.module.css","App.module.css","Components/Table/Table.module.css","Components/Table/TableContainer.module.css","Components/Table/additionalInfo/AdditionalInfo.module.css"],"names":["module","exports","infoAPI","axios","get","then","res","data","initialState","array","modalIsOpenForList","modalIsOpenForError","input","currentPage","postPerPage","listOfContacts","modalForNewContact","contact","preloader","setNewArrAC","type","SET_NEW_ARR","setInputAC","value","SET_INPUT","setModalIsOpenAC","SET_MODAL_IS_OPEN","setInfoSmallAC","smallArray","SET_INFO_SMALL","setChouseListOFContactsAC","SET_LIST_OF_CONTACTS","setModalForNewContactAC","SET_MODAL_FOR_NEW_CONTACT","setPreloader","SET_PRELOADER","fetchInfoSmallThunk","dispatch","a","console","log","fetchInfoBigThunk","SET_CURRENT_PAGE","SET_LOADING","SET_ADD_NEW_CONTACT","Header","props","useDispatch","className","styles","searcContainer","onChange","e","preventDefault","target","onKeyPress","key","setValue","icon","faSearch","Button","color","onClick","Paginator","useState","portionNumber","setPortionNumber","portionCount","totalPosts","postsPerPage","pageNumbers","i","Math","ceil","push","leftPortionPageNumber","rightPortionPageNumber","filter","p","map","number","paginate","style","page","AdditionalInfo","container","additionalInfoObj","firstName","address","streetAddress","city","state","zip","btn","setShowAdditionalInfo","customStyles","content","width","height","display","top","left","right","bottom","marginRight","transform","useStyles","makeStyles","theme","createStyles","root","margin","spacing","buttons","ModalNewContact","classes","isOpen","contentLabel","info","justify","item","xs","onSubmit","formik","handleSubmit","noValidate","autoComplete","FormControl","FormGroup","TextField","id","variant","label","getFieldProps","errors","email","errorEmail","disabled","values","length","lastName","phone","TableSmallListOfContacts","useEffect","indexOfLastPost","indexOfFirstPost","currentPost","slice","error","newClassName","tableForHover","myTableHeader","box1","headerName","onHandleClickASC","onHandleClickDESC","box2","box3","box4","box5","CircularProgress","el","setAdditionalInfoObj","description","myTable","showAdditionalInfo","TableBigListOfContacts","TableContainer","React","memo","useSelector","table","useFormik","validate","test","initialValues","newContact","filteredContacts","toLowerCase","match","setTimeout","sort","b","pageNumber","setCurrentPageAC","App","newContainer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","loading","floor","random","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4cee76a8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__13DD0\"};","import axios from \"axios\";\nimport {InformResponseType} from \"../Redux/table-reducer\";\n\n\nexport const infoAPI = {\n    getInfoSmall() {\n      return axios.get<Array<InformResponseType>>('http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}/')\n            .then(res=>res.data)\n\n    },\n    getInfoBig(){\n        debugger\n        return axios.get<Array<InformResponseType>>('http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}/')\n            .then(res=>res.data)\n    }\n\n\n\n}\n\n","import {Dispatch} from \"redux\";\nimport {infoAPI} from \"../Api/api\";\n\n\nexport type ListOfContactsType = 0 | 1 | 2\n\nlet initialState = {\n    array: [] as Array<InformResponseType> | [],\n    modalIsOpenForList: true,\n    modalIsOpenForError: false,\n    input: \"\",\n    currentPage: 1,\n    postPerPage: 10,\n    listOfContacts: 0 as ListOfContactsType,\n    modalForNewContact: false,\n    contact: {} as InformResponseType,\n    preloader: true\n}\n\n\nexport function tableReducer(state: InitialStateType = initialState, action: AllACTypes) {\n    switch (action.type) {\n        case SET_NEW_ARR:\n            return {...state, array: action.array}\n        case SET_INPUT:\n            return {...state, input: action.value}\n        case SET_MODAL_IS_OPEN:\n            return {...state, modalIsOpenForError: action.value}\n        case SET_INFO_SMALL:\n            return {...state, array: action.smallArray}//взять старый стей и пользовтелей которые там были и перезатеретт весь массив\n        case SET_CURRENT_PAGE:\n            return {...state, currentPage: action.pageNumber}\n        case SET_LOADING:\n            return {...state, loading: action.loading}\n        case SET_LIST_OF_CONTACTS:\n            return {...state, listOfContacts: action.listOfContacts}\n        case SET_ADD_NEW_CONTACT:\n            const newContact = {\n                id: Math.floor(Math.random() * 1000),\n                firstName: action.newContact.firstName,\n                lastName: action.newContact.lastName,\n                email: action.newContact.email,\n                phone: action.newContact.phone,\n                address: {\n                    streetAddress: 'test',\n                    city: 'test',\n                    state: 'test',\n                    zip: 'test'\n                },\n                description: \"test\"\n            }\n            return {\n                ...state,\n                array: [newContact, ...state.array]\n            }\n\n\n        case SET_MODAL_FOR_NEW_CONTACT: {\n            return {...state, modalForNewContact: action.value}\n        }\n        case SET_PRELOADER:\n        return {...state,preloader:action.value}\n        default:\n            return state\n    }\n}\n\n////ACTIONS\n\nexport const setNewArrAC = (array: Array<InformResponseType>): setNewArrACType => ({type: SET_NEW_ARR, array})\nexport const setInputAC = (value: string): setInputACType => ({type: SET_INPUT, value})\nexport const setModalIsOpenAC = (value: boolean): setModalIsOpenACType => ({type: SET_MODAL_IS_OPEN, value})\nexport const setInfoSmallAC = (smallArray: Array<InformResponseType>): setInfoSmallType => ({\n    type: SET_INFO_SMALL,\n    smallArray\n})\nexport const setCurrentPageAC = (pageNumber: number): SetCurrentPageACType => ({type: SET_CURRENT_PAGE, pageNumber})\nexport const setLoadingAC = (loading: boolean): SetLoadingACType => ({type: SET_LOADING, loading})\nexport const setChouseListOFContactsAC = (listOfContacts: ListOfContactsType): SetChouseListOFContactsACType => ({\n    type: SET_LIST_OF_CONTACTS,\n    listOfContacts\n})\nexport const setAddNewContactAC = (newContact: newContactType): SetAddNewContactACType => ({\n    type: SET_ADD_NEW_CONTACT,\n    newContact\n})\nexport const setModalForNewContactAC = (value: boolean): SetModalForNewContactACType => ({\n    type: SET_MODAL_FOR_NEW_CONTACT,\n    value\n})\nexport const setPreloader = (value: boolean): SetPreloaderType => ({\n    type: SET_PRELOADER,\n    value\n})\n\n\n////THUNKS\nexport const fetchInfoSmallThunk = async (dispatch: Dispatch) => {\n    try {\n        let data = await infoAPI.getInfoSmall()\n        dispatch(setInfoSmallAC(data))\n        dispatch(setPreloader(false))\n    } catch (error) {\n        console.log(error)\n    }\n}\nexport const fetchInfoBigThunk = async (dispatch: Dispatch) => {\n    try {\n        let data = await infoAPI.getInfoBig()\n        dispatch(setInfoSmallAC(data))\n        dispatch(setPreloader(false))\n    } catch (error) {\n        console.log(error)\n    }\n\n}\n\n\ntype SetPreloaderType = {\n    type: typeof SET_PRELOADER\n    value: boolean\n}\ntype SetModalForNewContactACType = {\n    type: typeof SET_MODAL_FOR_NEW_CONTACT\n    value: boolean\n}\ntype SetAddNewContactACType = {\n    type: typeof SET_ADD_NEW_CONTACT\n    newContact: newContactType\n\n}\ntype newContactType = {\n    firstName: string\n    lastName: string,\n    email: string,\n    phone: string\n}\ntype SetLoadingACType = {\n    type: typeof SET_LOADING\n    loading: boolean\n}\ntype SetChouseListOFContactsACType = {\n    type: typeof SET_LIST_OF_CONTACTS\n    listOfContacts: ListOfContactsType\n}\ntype SetCurrentPageACType = {\n    type: typeof SET_CURRENT_PAGE\n    pageNumber: number\n}\ntype setNewArrACType = {\n    type: typeof SET_NEW_ARR\n    array: Array<InformResponseType>\n}\ntype setInfoSmallType = {\n    type: typeof SET_INFO_SMALL\n    smallArray: Array<InformResponseType>\n}\ntype setInputACType = {\n    type: typeof SET_INPUT\n    value: string\n}\ntype setModalIsOpenACType = {\n    type: typeof SET_MODAL_IS_OPEN\n    value: boolean\n}\ntype AllACTypes =\n    | setNewArrACType\n    | setInputACType\n    | setModalIsOpenACType\n    | setInfoSmallType\n    | SetCurrentPageACType\n    | SetLoadingACType\n    | SetChouseListOFContactsACType\n    | SetAddNewContactACType\n    | SetModalForNewContactACType\n    | SetPreloaderType\n\n\nexport const SET_NEW_ARR = \"SET_NEW_ARR\"\nexport const SET_INPUT = \"SET_INPUT\"\nexport const SET_MODAL_IS_OPEN = \"SET_MODAL_IS_OPEN\"\nexport const SET_INFO_SMALL = \"SET_INFO_SMALL\"\nexport const SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\nexport const SET_LOADING = \"SET_LOADING\"\nexport const SET_LIST_OF_CONTACTS = \"SET_LIST_OF_CONTACTS\"\nexport const SET_ADD_NEW_CONTACT = \"SET_ADD_NEW_CONTACT\"\nexport const SET_MODAL_FOR_NEW_CONTACT = \"SET_MODAL_FOR_NEW_CONTACT\"\nexport const SET_PRELOADER = \"SET_PRELOADER\"\n\n\nexport type InitialStateType = {\n    array: Array<InformResponseType>\n    modalIsOpenForList: boolean,\n    modalIsOpenForError: boolean,\n    input: string,\n    currentPage: number,\n    postPerPage: number,\n    listOfContacts: ListOfContactsType\n    modalForNewContact: boolean\n    preloader: boolean\n}\nexport type defArrType = {\n    \"id\": number,\n    \"name\": string,\n    \"sites\": number,\n    \"type\": string,\n    \"status\": string\n}\ntype AddressType = {\n    streetAddress: string\n    city: string,\n    state: string,\n    zip: string\n}\n\nexport type InformResponseType = {\n    id: number,\n    firstName: string,\n    lastName: string,\n    email: string,\n    phone: string,\n    address: AddressType,\n    description: string,\n}\n\n\n\n\n\n\n\n\n","import React, {ChangeEvent} from \"react\";\nimport styles from './Header.module.css'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faSearch} from \"@fortawesome/free-solid-svg-icons\";\nimport {setInputAC, setNewArrAC} from \"../Redux/table-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {Button} from \"@material-ui/core\";\n\n\ntype HeaderPropsType = {\n    input: string\n    setValue: (value: string) => void\n}\n\n\nexport const Header = (props: HeaderPropsType) => {\n    const dispatch = useDispatch()\n\n    const onChangeInputFind = (e: ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault()\n        dispatch(setInputAC(e.target.value))\n    }\n\n    return <div className={styles.searcContainer}>\n        <input\n            value={props.input}\n            onChange={onChangeInputFind}\n            onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                    props.setValue(props.input)\n                }\n            }}\n        />\n\n\n        <FontAwesomeIcon\n            icon={faSearch} className={styles.faSearch}/>\n\n        <Button color=\"primary\" onClick={() => {\n            props.setValue(props.input)\n        }}>Найти</Button>\n\n    </div>\n}","import React, {useState} from \"react\";\nimport style from './Pagination.module.css'\nimport {Button} from \"@material-ui/core\";\n\ntype PaginatorPropsType = {\n    postsPerPage: number\n    totalPosts: number\n    paginate: (pageNumber: number) => void\n}\n\nexport const Paginator = (props: PaginatorPropsType) => {\n    const [portionNumber, setPortionNumber] = useState(1)\n    const portionCount = props.totalPosts / props.postsPerPage\n    const pageNumbers = []\n    for (let i = 1; i <= Math.ceil(props.totalPosts / props.postsPerPage); i++) {\n        pageNumbers.push(i)\n    }\n    let leftPortionPageNumber = (portionNumber - 1) * props.postsPerPage + 1\n    let rightPortionPageNumber = portionNumber * props.postsPerPage\n    return (\n        <nav>\n            <ul className='pagination'>\n                {portionNumber > 1 && <Button color=\"primary\" onClick={() => {\n                    setPortionNumber(portionNumber - 1)\n                }}>Prev</Button>}\n                {pageNumbers.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n                    .map(number => (\n                        <span key={number} className=\"page-item\">\n            <a onClick={() => props.paginate(number)} className={style.page}>\n                {number}\n            </a>\n        </span>\n                    ))}\n                {(portionCount > portionNumber && portionCount > 10) &&\n                <Button color=\"primary\" onClick={() => {\n                    setPortionNumber(portionNumber + 1)\n                }}>Next</Button>\n                }\n\n            </ul>\n        </nav>\n    )\n}","import React from 'react'\nimport {InformResponseType} from \"../../Redux/table-reducer\";\nimport style from './AdditionalInfo.module.css'\nimport {Button} from \"@material-ui/core\";\n\ntype AdditionalInfoPropsType = {\n    additionalInfoObj: InformResponseType\n    setShowAdditionalInfo: (value: boolean) => void\n}\n\nexport const AdditionalInfo = (props: AdditionalInfoPropsType) => {\n    return (\n        <div className={style.container}>\n            <div>\n                Выбран пользователь <b>{props.additionalInfoObj.firstName}</b>\n            </div>\n            <div>\n                Адрес проживания: <b>{props.additionalInfoObj.address.streetAddress}</b>\n            </div>\n            <div>\n                Город: <b>{props.additionalInfoObj.address.city}</b>\n            </div>\n            <div>\n                Провинция/штат: <b>{props.additionalInfoObj.address.state}</b>\n            </div>\n            <div>\n                Индекс: <b>{props.additionalInfoObj.address.zip}</b>\n            </div>\n            <Button className={style.btn} color=\"secondary\" onClick={() => {\n                props.setShowAdditionalInfo(false)\n            }}>Close</Button>\n\n\n        </div>\n    )\n}","import React from \"react\";\nimport Modal from \"react-modal\";\nimport styles from \"../../Header/Header.module.css\";\nimport Grid from \"@material-ui/core/Grid/Grid\";\nimport {Button, createStyles, FormControl, FormGroup, TextField, Theme} from \"@material-ui/core\";\nimport style from \"../Table.module.css\";\nimport {setModalForNewContactAC} from \"../../Redux/table-reducer\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport {useDispatch} from \"react-redux\";\nimport {FormikContextType} from \"formik\";\nimport {valuesPropsFormikType} from \"../TableContainer\";\n\nconst customStyles = {\n    content: {\n        width: '450px',\n        height: '420px',\n        display: 'flex',\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)',\n    },\n\n};\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            '& .MuiTextField-root': {\n                margin: theme.spacing(1),\n                // margin:'5px',\n                width: '25ch',\n            },\n        },\n        buttons:{\n\n            margin: theme.spacing(1),\n            width: '32ch',\n\n        }\n    }),\n);\n\ntype ModalNewContactPropsType = {\n    modalForNewContact:boolean\n    formik:FormikContextType<valuesPropsFormikType>\n}\n\nexport const ModalNewContact=(props:ModalNewContactPropsType)=>{\n    const dispatch = useDispatch()\n    const classes = useStyles();\n    return(\n        <Modal\n            isOpen={props.modalForNewContact}\n            style={customStyles}\n            contentLabel=\"Example Modal\"\n        >\n            <div className={styles.info}>\n                <Grid container justify=\"center\">\n                    <Grid item xs={4}>\n                        <form onSubmit={props.formik.handleSubmit} className={classes.root} noValidate autoComplete=\"off\" >\n                            <FormControl>\n                                <FormGroup>\n                                    <TextField\n                                        id=\"standard-basic\"\n                                        variant=\"outlined\"\n                                        label=\"firstName\"\n                                        type=\"firstName\"\n                                        margin=\"normal\"\n                                        {...props.formik.getFieldProps('firstName')}\n                                    />\n                                    <TextField\n                                        type=\"lastName\"\n                                        variant=\"outlined\"\n                                        label=\"lastName\"\n                                        margin=\"normal\"\n                                        {...props.formik.getFieldProps('lastName')}\n                                    />\n                                    <TextField\n                                        type=\"email\"\n                                        variant=\"outlined\"\n                                        label=\"email\"\n                                        margin=\"normal\"\n                                        {...props.formik.getFieldProps('email')}\n                                    />\n                                    {props.formik.errors.email ? <div className={style.errorEmail}>{props.formik.errors.email}</div> : null}\n                                    <TextField\n                                        type=\"phone\"\n                                        variant=\"outlined\"\n                                        label=\"phone\"\n                                        margin=\"normal\"\n                                        {...props.formik.getFieldProps('phone')}\n                                    />\n                                    {/*{formik.errors.phone ? <div>{formik.errors.phone}</div> : null}*/}\n                                    <br></br>\n                                    <Button className={classes.buttons} disabled={\n                                        props.formik.values.firstName.length>0 &&\n                                        props.formik.values.lastName.length>0  &&\n                                        props.formik.values.email.length>0 &&\n                                        props.formik.values.phone.length>0 ? false :true\n                                    } type={'submit'} variant={'contained'} color={'primary'}>Добавить</Button>\n                                    <Button\n                                        onClick={()=>{dispatch(setModalForNewContactAC(false))}}\n                                        className={classes.buttons}  variant={'contained'} color={'secondary'}>Назад</Button>\n                                </FormGroup>\n                            </FormControl>\n                        </form>\n                    </Grid>\n                </Grid>\n\n            </div>\n        </Modal>\n    )\n}","import React, {useEffect} from \"react\";\nimport style from './Table.module.css'\nimport {Header} from \"../Header/Header\";\nimport {useDispatch} from \"react-redux\";\nimport {\n    fetchInfoSmallThunk,\n    InformResponseType,\n    setModalForNewContactAC,\n} from \"../Redux/table-reducer\";\nimport {Paginator} from \"../paginator/Pagination\";\nimport {Button, CircularProgress} from \"@material-ui/core\";\nimport {AdditionalInfo} from \"./additionalInfo/AdditionalInfo\";\nimport {ModalNewContact} from \"./ModalWindows/ModalNewContact\";\nimport {FormikContextType} from \"formik\";\nimport {valuesPropsFormikType} from \"./TableContainer\";\n\n\nexport const TableSmallListOfContacts = (props: TablePropsType) => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchInfoSmallThunk)\n    }, [])\n\n    //getCurrent contact\n    const indexOfLastPost = props.currentPage * props.postPerPage;\n    const indexOfFirstPost = indexOfLastPost - props.postPerPage\n    const currentPost = props.array.slice(indexOfFirstPost, indexOfLastPost)\n\n\n    return (\n        <div>\n            <Button className={style.btn} color=\"primary\" onClick={() => {\n                dispatch(setModalForNewContactAC(true))\n            }}>Добавить Контакт\n            </Button>\n            <ModalNewContact formik={props.formik} modalForNewContact={props.modalForNewContact}/>\n            <Header input={props.input} setValue={props.setValue}/>\n            {props.modalIsOpenForError ? <div className={style.error}>Ничего не найдено</div> : ''}\n            <div className={style.newClassName}>\n                <div className={style.tableForHover}>\n                    <div className={style.myTableHeader}>\n                        <div className={style.box1}>\n                            <p className={style.headerName}>\n                                Id\n                                <span onClick={props.onHandleClickASC}>▲</span><span\n                                onClick={props.onHandleClickDESC}>▼</span></p>\n                        </div>\n                        <div className={style.box2}>\n                            <p className={style.headerName}>FirstName</p>\n                        </div>\n                        <div className={style.box3}>\n                            <p className={style.headerName}>LastName</p>\n                        </div>\n                        <div className={style.box4}>\n                            <p className={style.headerName}>Email</p>\n                        </div>\n                        <div className={style.box5}>\n                            <p className={style.headerName}>Phone</p>\n                        </div>\n                    </div>\n                    {props.preloader && <CircularProgress/>}\n\n                    {currentPost.map((el: InformResponseType) => {\n                        return (\n                            <div onClick={() => {\n\n                                props.setAdditionalInfoObj({\n                                    id: el.id,\n                                    firstName: el.firstName,\n                                    lastName: el.lastName,\n                                    email: el.email,\n                                    phone: el.phone,\n                                    address: {\n                                        streetAddress: el.address.streetAddress,\n                                        city: el.address.city,\n                                        state: el.address.state,\n                                        zip: el.address.zip\n                                    },\n                                    description: el.description,\n                                })\n                                props.setShowAdditionalInfo(true)\n                            }} className={style.myTable} key={el.id}>\n                                <div className={style.box1}>\n                                    <p>{el.id}</p>\n                                </div>\n                                <div className={style.box2}>\n                                    <p>{el.firstName}</p>\n                                </div>\n                                <div className={style.box3}>\n                                    <p>{el.lastName}</p>\n\n                                </div>\n                                <div className={style.box4}>\n                                    <p>{el.email}</p>\n\n                                </div>\n                                <div className={style.box5}>\n                                    <p>{el.phone}</p>\n                                </div>\n\n                            </div>\n                        )\n                    })}\n                    <Paginator postsPerPage={props.postPerPage} totalPosts={props.array.length}\n                               paginate={props.paginate}/>\n                    {props.showAdditionalInfo && <AdditionalInfo setShowAdditionalInfo={props.setShowAdditionalInfo}\n                                                                 additionalInfoObj={props.additionalInfoObj}/>}\n                </div>\n            </div>\n        </div>)\n\n\n}\n\n\nexport type TablePropsType = {\n    input: string\n    currentPage: number\n    postPerPage: number\n    modalIsOpenForError: boolean\n    array: Array<InformResponseType>\n    modalForNewContact: boolean\n    preloader: boolean\n    showAdditionalInfo: boolean\n    additionalInfoObj: InformResponseType\n    formik:FormikContextType<valuesPropsFormikType>\n    setValue: (value: string) => void\n    onHandleClickASC: () => void\n    onHandleClickDESC: () => void\n    paginate: (pageNumber: number) => void\n    setAdditionalInfoObj: (value:InformResponseType)=>void\n    setShowAdditionalInfo: (value: boolean) => void\n\n}\n\n\n","import React, {useEffect} from \"react\";\nimport style from './Table.module.css'\nimport {Header} from \"../Header/Header\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchInfoBigThunk, InformResponseType, setModalForNewContactAC} from \"../Redux/table-reducer\";\nimport {Paginator} from \"../paginator/Pagination\";\nimport {Button, CircularProgress} from \"@material-ui/core\";\nimport {TablePropsType} from \"./TableSmallListOfContacts\";\nimport {ModalNewContact} from \"./ModalWindows/ModalNewContact\";\nimport {AdditionalInfo} from \"./additionalInfo/AdditionalInfo\";\n\n\nexport const TableBigListOfContacts = (props: TablePropsType) => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchInfoBigThunk)\n    }, [])\n\n    //getCurrent contact\n    const indexOfLastPost = props.currentPage * props.postPerPage;\n    const indexOfFirstPost = indexOfLastPost - props.postPerPage\n    const currentPost = props.array.slice(indexOfFirstPost, indexOfLastPost)\n\n    return (\n        <div>\n            <Button className={style.btn} color=\"primary\" onClick={() => {\n                dispatch(setModalForNewContactAC(true))\n            }}>Добавить Контакт\n            </Button>\n            <ModalNewContact formik={props.formik} modalForNewContact={props.modalForNewContact}/>\n\n            <Header input={props.input} setValue={props.setValue}/>\n            {props.modalIsOpenForError ? <div className={style.error}>Ничего не найдено</div> : ''}\n            <div className={style.newClassName}>\n                <div className={style.tableForHover}>\n                    <div className={style.myTableHeader}>\n                        <div className={style.box1}>\n                            <p className={style.headerName}>\n                                Id\n                                <span onClick={props.onHandleClickASC}>▲</span><span\n                                onClick={props.onHandleClickDESC}>▼</span></p>\n                        </div>\n                        <div className={style.box2}>\n                            <p className={style.headerName}>FirstName</p>\n                        </div>\n                        <div className={style.box3}>\n                            <p className={style.headerName}>LastName</p>\n                        </div>\n                        <div className={style.box4}>\n                            <p className={style.headerName}>Email</p>\n                        </div>\n                        <div className={style.box5}>\n                            <p className={style.headerName}>Phone</p>\n                        </div>\n                    </div>\n                    {props.preloader && <CircularProgress className={style.preloader}/>}\n                    {currentPost.map((el: InformResponseType) => {\n                        return (\n                            <div onClick={() => {\n                                props.setAdditionalInfoObj({\n                                    id: el.id,\n                                    firstName: el.firstName,\n                                    lastName: el.lastName,\n                                    email: el.email,\n                                    phone: el.phone,\n                                    address: {\n                                        streetAddress: el.address.streetAddress,\n                                        city: el.address.city,\n                                        state: el.address.state,\n                                        zip: el.address.zip\n                                    },\n                                    description: el.description,\n                                })\n                                props.setShowAdditionalInfo(true)\n                            }}\n\n                                 className={style.myTable} key={el.id}>\n                                <div className={style.box1}>\n                                    <p>{el.id}</p>\n                                </div>\n                                <div className={style.box2}>\n                                    <p>{el.firstName}</p>\n                                </div>\n                                <div className={style.box3}>\n                                    <p>{el.lastName}</p>\n                                </div>\n                                <div className={style.box4}>\n                                    <p>{el.email}</p>\n\n                                </div>\n                                <div className={style.box5}>\n                                    <p>{el.phone}</p>\n                                </div>\n                            </div>\n                        )\n                    })}\n                    <Paginator postsPerPage={props.postPerPage} totalPosts={props.array.length}\n                               paginate={props.paginate}/>\n                    {props.showAdditionalInfo && <AdditionalInfo setShowAdditionalInfo={props.setShowAdditionalInfo}\n                                                                 additionalInfoObj={props.additionalInfoObj}/>}\n                </div>\n            </div>\n        </div>)\n}\n","import React, {useState} from \"react\";\nimport Modal from 'react-modal'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport styles from \"./TableContainer.module.css\"\nimport {\n    fetchInfoBigThunk,\n    fetchInfoSmallThunk, InformResponseType, ListOfContactsType,\n    setAddNewContactAC,\n    setChouseListOFContactsAC, setCurrentPageAC, setInputAC,\n    setModalForNewContactAC, setModalIsOpenAC,\n    setNewArrAC\n} from \"../Redux/table-reducer\";\nimport {TableSmallListOfContacts} from \"./TableSmallListOfContacts\";\nimport {TableBigListOfContacts} from \"./TableBigListOfContacts\";\nimport {FormikErrors, useFormik} from \"formik\";\nimport {Button} from \"@material-ui/core\";\nimport {AppRootStateType} from \"../Redux/Store\";\n\nconst customStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)'\n    }\n};\nexport type valuesPropsFormikType = {\n    firstName: string,\n    lastName: string\n    email: string\n    phone: string\n\n}\nexport const TableContainer = React.memo(() => {\n    const dispatch = useDispatch()\n    const [showAdditionalInfo, setShowAdditionalInfo] = useState<boolean>(false)\n    const input = useSelector<AppRootStateType, string>(state => state.table.input)\n    const currentPage = useSelector<AppRootStateType, number>(state => state.table.currentPage)\n    const postPerPage = useSelector<AppRootStateType, number>(state => state.table.postPerPage)\n    const modalIsOpenForError = useSelector<AppRootStateType, boolean>(state => state.table.modalIsOpenForError)\n    const array = useSelector<AppRootStateType, Array<InformResponseType>>(state => state.table.array)\n    const modalForNewContact = useSelector<AppRootStateType, boolean>(state => state.table.modalForNewContact)\n    const preloader = useSelector<AppRootStateType, boolean>(state => state.table.preloader)\n    const modalIsOpenForList = useSelector<AppRootStateType, boolean>(state => state.table.modalIsOpenForList)\n    const listOfContacts = useSelector<AppRootStateType, ListOfContactsType>(state => state.table.listOfContacts)\n    const [additionalInfoObj, setAdditionalInfoObj] = useState<InformResponseType>({\n        id: 10,\n        firstName: '',\n        lastName: '',\n        email: '',\n        phone: '',\n        address: {\n            streetAddress: '',\n            city: '',\n            state: '',\n            zip: ''\n        },\n        description: '',\n    })\n\n\n    const formik = useFormik({\n        validate: (values: valuesPropsFormikType) => {\n            const errors: FormikErrors<valuesPropsFormikType> = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            return errors;\n        },\n\n        initialValues: {\n            firstName: '',\n            lastName: '',\n            email: '',\n            phone: ''\n\n        },\n        onSubmit: values => {\n\n            dispatch(setAddNewContactAC(\n                formik.values\n            ))\n            dispatch(setModalForNewContactAC(false))\n        },\n\n    })\n\n\n    const setValue = (value: string) => {\n        if (input.length >= 1) {\n            let filteredContacts = (array.filter((i: InformResponseType) => {\n                let matchNames = i.firstName.toLowerCase()\n                return matchNames.match(value)\n            }))\n            dispatch(setNewArrAC(filteredContacts))\n        } else if (input.length === 0 && listOfContacts === 1) {\n            dispatch(fetchInfoSmallThunk)\n        } else if (input.length === 0 && listOfContacts === 2) {\n            dispatch(fetchInfoBigThunk)\n        }\n        dispatch(setInputAC(value))\n        if (array.length === 0 && !modalIsOpenForError) {\n            dispatch(setModalIsOpenAC(true))\n            setTimeout(() => {\n                dispatch(setModalIsOpenAC(false))\n            }, 2000)\n        }\n    }\n    const onHandleClickASC = () => {\n        dispatch(setNewArrAC([...array].sort((a, b) => {\n            return a.firstName === b.firstName ? 0 :\n                a.firstName > b.firstName ? 1 : -1\n        })))\n    }\n    const onHandleClickDESC = () => {\n        dispatch(setNewArrAC([...array].sort((a, b) => {\n            return a.firstName === b.firstName ? 0 :\n                a.firstName < b.firstName ? 1 : -1\n        })))\n    }\n\n\n    //set contact\n    const paginate = (pageNumber: number) => {\n        dispatch(setCurrentPageAC(pageNumber))\n    }\n\n    return (\n        <div className={styles.App}>\n\n            <div className={styles.newContainer}>\n\n                {listOfContacts === 0 &&\n                <Modal\n                    isOpen={modalIsOpenForList}\n                    style={customStyles}\n                    contentLabel=\"Example Modal\"\n                >\n                    <div className={styles.info}>\n                        <h2>Какой список пользователей Вы выбираете?</h2>\n                        <Button variant=\"contained\" onClick={() => {\n                            return dispatch(setChouseListOFContactsAC(1))\n                        }}>Маленький</Button>\n                        <Button variant=\"contained\" onClick={() => {\n                            return dispatch(setChouseListOFContactsAC(2))\n                        }}>Большой</Button>\n                    </div>\n\n                </Modal>}\n\n\n                {listOfContacts === 1 ? <TableSmallListOfContacts\n                    additionalInfoObj={additionalInfoObj}\n                    array={array}\n                    currentPage={currentPage}\n                    formik={formik}\n                    input={input}\n                    modalForNewContact={modalForNewContact}\n                    modalIsOpenForError={modalIsOpenForError}\n                    onHandleClickASC={onHandleClickASC}\n                    onHandleClickDESC={onHandleClickDESC}\n                    paginate={paginate}\n                    postPerPage={postPerPage}\n                    preloader={preloader}\n                    setValue={setValue}\n                    showAdditionalInfo={showAdditionalInfo}\n                    setAdditionalInfoObj={setAdditionalInfoObj}\n                    setShowAdditionalInfo={setShowAdditionalInfo}\n\n\n                /> : listOfContacts === 2 ? <TableBigListOfContacts\n                    additionalInfoObj={additionalInfoObj}\n                    array={array}\n                    currentPage={currentPage}\n                    formik={formik}\n                    input={input}\n                    modalForNewContact={modalForNewContact}\n                    modalIsOpenForError={modalIsOpenForError}\n                    onHandleClickASC={onHandleClickASC}\n                    onHandleClickDESC={onHandleClickDESC}\n                    paginate={paginate}\n                    postPerPage={postPerPage}\n                    preloader={preloader}\n                    setValue={setValue}\n                    showAdditionalInfo={showAdditionalInfo}\n                    setAdditionalInfoObj={setAdditionalInfoObj}\n                    setShowAdditionalInfo={setShowAdditionalInfo}\n                /> : ''}\n\n            </div>\n\n        </div>\n    );\n})\n\n\n","import './App.module.css';\nimport React from \"react\";\nimport styles from './App.module.css'\nimport {TableContainer} from \"./Components/Table/TableContainer\";\n\nfunction App() {\n    return (\n        <div className={styles.App}>\n            <div className={styles.newContainer}>\n                <TableContainer/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\nimport {useDispatch} from \"react-redux\";\nimport {tableReducer} from \"./table-reducer\";\nimport thunkMiddleware from \"redux-thunk\"\n\n\nconst reducers = combineReducers({\n    table: tableReducer,\n})\n\n\nexport const store = createStore(reducers,applyMiddleware(thunkMiddleware))\nexport type AppRootStateType = ReturnType<typeof reducers>\n\n// @ts-ignore\nwindow.store = store;\n\ntype AppDispatchType  = typeof store.dispatch\nexport const useAppDispatch = ()=> useDispatch<AppDispatchType>()\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Components/Redux/Store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n        </Provider>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searcContainer\":\"Header_searcContainer__OfKZU\",\"faSearch\":\"Header_faSearch__N5LGF\",\"preloader\":\"Header_preloader__3eRKM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"newContainer\":\"App_newContainer__2of63\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerName\":\"Table_headerName__21EZq\",\"myTableHeader\":\"Table_myTableHeader__3RyyJ\",\"myTable\":\"Table_myTable__3zrOv\",\"newClassName\":\"Table_newClassName__1X2TE\",\"types\":\"Table_types__Lc1_n\",\"error\":\"Table_error__3Zy0b\",\"box1\":\"Table_box1__22Fg_\",\"box2\":\"Table_box2__3eLkU\",\"box3\":\"Table_box3__yzWnD\",\"box4\":\"Table_box4__3h2vX\",\"box5\":\"Table_box5__3bESR\",\"buttonOff\":\"Table_buttonOff__WdV62\",\"buttonOn\":\"Table_buttonOn__PEUcF\",\"errorEmail\":\"Table_errorEmail__3FtJ2\",\"btn\":\"Table_btn__28vhE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"TableContainer_App__1YIgs\",\"newContainer\":\"TableContainer_newContainer__RsTHh\",\"info\":\"TableContainer_info__2vDNq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AdditionalInfo_container__2cUY3\",\"btn\":\"AdditionalInfo_btn__cuj6S\"};"],"sourceRoot":""}